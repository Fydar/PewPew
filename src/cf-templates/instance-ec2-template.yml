AWSTemplateFormatVersion: '2010-09-09'

Description: 'ECS cluster: Portfolio'
Parameters:

  Tag:
    Type: String
    Description: 'Image tag to launch task with.'
    Default: 'latest'

  DomainName:
    Type: String
    Description: The domain name for the deployed server.
    Default: 'www.anthonymarmont.com'
    AllowedPattern: '^.*anthonymarmont.com$'

  KeyPairName:
    Type: String
    Description: The KeyPair used for SSHing into instances deployed by the service.
    Default: manual-instance


  VpcCidr:
    Type: String
    Description: Specifies the CIDR Block of VPC
    Default: '10.10.0.0/16'
    AllowedPattern: '^((1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\/(8|16|24)$'
    
  SubnetIPv4Cidr1:
    Type: String
    Description: Specifies the IPv4 CIDR Block of Subnet 1
    Default: '10.10.0.0/24'
    AllowedPattern: '^((1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\/(8|16|24|32)$'
    
  SubnetIPv4Cidr2:
    Type: String
    Description: Specifies the IPv4 CIDR Block of Subnet 2
    Default: '10.10.1.0/24'
    AllowedPattern: '^((1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\/(8|16|24|32)$'
    
  SubnetIpv6Cidr1:
    Type: String
    Description: Specifies the IPv6 CIDR Block of Subnet 1
    Default: '2600:1f18:30d:9606::/64'
    AllowedPattern: '^([0-9a-fA-F]{1,4}:){4}:/64$'
    
  SubnetIpv6Cidr2:
    Type: String
    Description: Specifies the IPv6 CIDR Block of Subnet 2
    Default: '2600:1f18:30d:9607::/64'
    AllowedPattern: '^([0-9a-fA-F]{1,4}:){4}:/64$'

  SubnetAz1:
    Type: String
    Description: >
      Specifies an availability zone for a subnet.
    Default: 'us-east-1a'
    AllowedValues:
      - us-east-1a
      - us-east-1b
      - us-east-1c
      - us-east-1d
      - us-east-1e
      - us-east-1f
    
  SubnetAz2:
    Type: String
    Description: >
      Specifies an availability zone for a subnet.
    Default: 'us-east-1b'
    AllowedValues:
      - us-east-1a
      - us-east-1b
      - us-east-1c
      - us-east-1d
      - us-east-1e
      - us-east-1f

Mappings: {}
Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${DomainName}

  PubSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref SubnetAz1
      CidrBlock: !Ref SubnetIPv4Cidr1
      MapPublicIpOnLaunch: true
      # Ipv6CidrBlock: !Ref SubnetIpv6Cidr1
      # AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: !Sub ${DomainName} SbAz1

  PubSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref SubnetAz2
      CidrBlock: !Ref SubnetIPv4Cidr2
      MapPublicIpOnLaunch: true
      # Ipv6CidrBlock: !Ref SubnetIpv6Cidr2
      # AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: !Sub ${DomainName} SbAz2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${DomainName} Igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteViaIgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${DomainName} Rtb

  PublicRouteViaIgwIpv4:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteViaIgw
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  PublicRouteViaIgwIpv6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteViaIgw
      GatewayId: !Ref InternetGateway
      DestinationIpv6CidrBlock: ::/0

  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteViaIgw
      SubnetId: !Ref PubSubnetAz1

  PubSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteViaIgw
      SubnetId: !Ref PubSubnetAz2


  PortfolioCluster:
    Type: AWS::ECS::Cluster

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: emailreceive-resources
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'ses:SendRawEmail'
                Resource: '*'
              - Effect: Allow
                Action: 'ses:SendEmail'
                Resource: '*'


  PortfolioInstanceTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: bridge
      ExecutionRoleArn: !GetAtt [ECSTaskExecutionRole, Arn]
      TaskRoleArn: !GetAtt [ECSTaskRole, Arn]
      Cpu: 1 vCPU
      Memory: 0.9 GB
      RequiresCompatibilities:
        - EC2
      ContainerDefinitions:
        - Name: portfolio-instance
          Image: !Sub 222779217717.dkr.ecr.us-east-1.amazonaws.com/portfolioinstance:${Tag}
          Environment:
            - Name: CONFIG_DOMAINNAME
              Value: !Ref DomainName
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: HTTP
            - ContainerPort: 443
              HostPort: 443
              Protocol: HTTPS
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: 'portfolio-logs'
              awslogs-region: 'us-east-1'
              awslogs-stream-prefix: 'portfolio-instance'


  PortfolioInstanceService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref PortfolioCluster
      ServiceName: PortfolioInstance
      TaskDefinition: !Ref PortfolioInstanceTask
      LaunchType: EC2
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50


  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t4g.micro"
      ImageId: ami-055458a83541771a4
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref PortfolioInstanceNetworkInterface
      KeyName: !Ref KeyPairName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${PortfolioCluster} >> /etc/ecs/ecs.config
      IamInstanceProfile:
          Ref: PortfolioInstanceIAMProfile
      Tags:
        - Key: Name
          Value: !Sub ${DomainName} Instance
          
  PortfolioInstanceIAMProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - Ref: "ECSTaskRole"

  PortfolioInstanceNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PubSubnetAz1
      Description: Interface for controlling traffic such as SSH
      GroupSet: 
      - !Ref PortfolioInstanceSecurityGroup
      SourceDestCheck: true
      Tags:
        - Key: Network
          Value: Web

  WebPortAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: standard
      Tags:
        - Key: Name
          Value: !Sub ${DomainName} IP
      
  PortfolioInstanceRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: anthonymarmont.com.
      Name: !Ref DomainName
      ResourceRecords:
        - !Ref WebPortAddress
      Type: A
      TTL: '30'
    

  AssociateWebPort:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt WebPortAddress.AllocationId
      NetworkInterfaceId: !Ref PortfolioInstanceNetworkInterface

  PortfolioInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${DomainName} SSH/HTTP/HTTPS
      GroupDescription: 'Allow TCP ports 22, 80 and 443 for IPv4 and IPv6'
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIpv6: '::/0'
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIpv6: '::/0'
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIpv6: '::/0'
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

Outputs: {}
